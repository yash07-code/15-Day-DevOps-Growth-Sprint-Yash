Day 10 of my 15-Day DevOps Growth Sprint 
 ðŸš€ Built a Complete CI/CD Pipeline with GitOps Implementation!
Today I completed a major milestone â€” a full-fledged CI/CD pipeline integrated with GitOps deployment strategy using ArgoCD + Jenkins + AWS EKS.
What I Implemented:
 Infrastructure as Code (IaC)
 â€¢ EC2 instances provisioned using Terraform
 â€¢ Amazon EKS cluster deployed via CloudFormation

CI Pipeline (Jenkins):
 â€¢ GitHub code pull (auto-triggered)
 â€¢ OWASP Dependency Check
 â€¢ SonarQube code quality analysis
 â€¢ Docker image build & push
 â€¢ Trivy vulnerability scanning

CD Pipeline (GitOps using ArgoCD):
 â€¢ Jenkins CD job pushes updated image version to Git
 â€¢ ArgoCD syncs that version to Amazon EKS
 â€¢ Git = single source of truth
 â€¢ Self-healing & auto-sync enabled for robust delivery

Alerts
 â€¢ Email notifications on pipeline status
 Key Learning:
 Separating CI and CD responsibilities makes the system more secure, scalable, and maintainable.
 ðŸ”¹ Jenkins handles CI beautifully
 ðŸ”¹ ArgoCD excels with pull-based GitOps CD
 ðŸ”¹ Git becomes the reliable source of deployment truth

ðŸ›  Tech Stack Used:
 Jenkins | Docker | ArgoCD | AWS EKS | Terraform | CloudFormation | GitHub | Trivy | SonarQube | OWASP

ðŸ“¢ This project shows how modern DevOps + GitOps practices can build secure, production-grade automation pipelines.
ðŸ”¥ 5 more days to go in this sprint â€” stay tuned!
  
